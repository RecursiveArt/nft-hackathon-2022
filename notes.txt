
npx hardhat --network rinkeby deploy

npx hardhat verify --network rinkeby DEPLOYED_CONTRACT_ADDRESS "Constructor argument 1"

deploying "RecursiveExchange" (tx: 0xd983c98568385cb9f200d485599eb607cac68e76923b6d48487268418662a8d8)...: deployed at 0x301e91d3dA99b7d591625e03C27A67F559116259 with 1387136 gas
deploying "RecursiveArtNFT" (tx: 0x9de3825a2d70bdfbdff33eeac69265954e42921786a84a235761c10e12a35d34)...: deployed at 0x219C04d9e768f632621fb33120c9735E31C1dcAc with 2707783 gas
reusing "CreateNFT" at 0xcA620Ea9c5fE250A92F423e564332F829D8ff5EA

reusing "RecursiveExchange" at 0x301e91d3dA99b7d591625e03C27A67F559116259
reusing "RecursiveArtNFT" at 0x219C04d9e768f632621fb33120c9735E31C1dcAc
reusing "CreateNFT" at 0xcA620Ea9c5fE250A92F423e564332F829D8ff5EA

npx hardhat verify --network rinkeby 0xcA620Ea9c5fE250A92F423e564332F829D8ff5EA
npx hardhat verify --network rinkeby 0x301e91d3dA99b7d591625e03C27A67F559116259
npx hardhat verify --network rinkeby 0x219C04d9e768f632621fb33120c9735E31C1dcAc "0x301e91d3dA99b7d591625e03C27A67F559116259"







// 1. create an nft that you can then put on the exchange.
// 0xcA620Ea9c5fE250A92F423e564332F829D8ff5EA
// On the CreateNFT contract, call:
// mintToken('someCID')
// You need to add a string that holds the place of a content identifier
//
//
// 0xF7637b9628369AcFAC832654D69462CE5b4Ff689
// 2. On RecursiveExchange, call placeOffering() with three arguments
//   a) the address of the CreateNFT contract
//   b) your token id from the token you just minted
//   c) the price in eth you want to sell it for (1 is good so we don't waste test eth)
//
// 3. That function call will emit an event.  The first field of that event is offeringId.  Copy that value.
//
// 4. change accounts in metamask, then on RecursiveExchange call closeOffering() with the offeringId. The first field in etherscan is for the price, which from above is 1.  Now the token ownership has changed accounts.
// closeOffering() emits the event that contains the data that will be used to generate the art.
//
// 5. With the account that bought the token, go to the RecursiveArtNFT contract and you can mint your new nft.  You'll have to enter a fake string to simulate the CID for the gen art. Under the hood, this function checks that the message sender is the owner of the NFT that was purchased on the exchange contract.
// 0xC01ae9e913Da086eCfC2F218FA9f1ecb2adCFEbf
// mintRecursiveNFT()
// First parameter: offering Id that you used in step #4
// second parameter:  make up some string for a CID
//
// Note that the token id and the offeringId might be the same, but over time this will not be the case, which is why two variables are needed.
// Note that when you want to check the ownership of this new recursive NFT, you need to use the function on the RecursiveArtNFT contract, ownerOf().  You enter the token id, just as you would with any other NFT contract.  I say this so you don't accidentally use the offeringId.

// deploying "RecursiveExchange" (tx: 0x4c6f5e0ec582b503e15065beb7cfe849526d179b461ae3fe7ef70a5403ef7a02)...: deployed at 0xF7637b9628369AcFAC832654D69462CE5b4Ff689 with 1377385 gas
// deploying "RecursiveArtNFT" (tx: 0xdabac82faf28290bb9a923b017749e4eb2300328e8fb044cf416746fcf84d14c)...: deployed at 0xC01ae9e913Da086eCfC2F218FA9f1ecb2adCFEbf with 2707783 gas
// deploying "CreateNFT" (tx: 0xb99090655dbc889a4f0d5b3dcb414573335cf7a994a8873d8e610ddceb1cfaf7)...: deployed at 0xcA620Ea9c5fE250A92F423e564332F829D8ff5EA with 2497476 gas
